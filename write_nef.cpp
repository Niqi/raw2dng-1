#include <stdio.h>
#include <string.h>
#pragma hdrstop

/*
   Coolpix RAW to Coolpix NEF converter
   by paul69, v0.14, 2005-12-20, <e2500@narod.ru>

   Writting NEF file
*/

#include "tiff.h"
#include "file.h"
#include "raw2nef.h"

// thumbnail size
#define tn_H 120
#define tn_W 160

bool write(IFDir& ifd, FILE* out, bool endian, unsigned tiff_start, unsigned next_ifd);
bool write_word(FILE* out, bool endian, unsigned w);
bool write_dword(FILE* out, bool endian, unsigned dw);
bool write_thumbnail(FILE*, color_t const[], int w, int h, TCCDParam const&);

////////////////////////////////////////////////////////////////////////////////
static
byte some_data_E8700[2560] =
{
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x4D,
          0x01,0x4D,0x02,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,
          0x01,0x03,0x20,0x55,0x00,0x00,0x00,0x00,0x06,0x68,0x00,0x00,0x10,0xB2,0x0A,0x4A,
          0x06,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x00,0x05,
          0x00,0x32,0x00,0x10,0x03,0xFF,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x18,
          0x00,0x00,0x04,0x04,0x00,0x0D,0x00,0x08,0x00,0x19,0x00,0x13,0x00,0x27,0x00,0x20,
          0x00,0x37,0x00,0x2F,0x00,0x64,0x00,0x4B,0x00,0xA4,0x00,0x81,0x00,0xFC,0x00,0xCD,
          0x01,0x78,0x01,0x35,0x02,0x36,0x01,0xCA,0x03,0x58,0x02,0xD9,0x01,0x07,0x00,0x8F,
          0x01,0xA7,0x01,0x60,0x02,0x15,0x01,0xE3,0x02,0x6E,0x02,0x42,0x02,0xEF,0x02,0xB2,
          0x03,0x4A,0x03,0x22,0x03,0x8C,0x03,0x70,0x03,0xBD,0x03,0xA8,0x03,0xE1,0x03,0xD0,
          0x03,0xF9,0x03,0xF0,0x00,0x00,0x00,0x80,0x00,0xF3,0x93,0xFA,0x00,0x80,0xFC,0x04,
          0x00,0x00,0x01,0x32,0x00,0x00,0x02,0x59,0x00,0x00,0x00,0x75,0x01,0xC2,0x03,0xA1,
          0x03,0xEC,0x01,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
          0x00,0x00,0x03,0xFF,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x00,0x01,0xE0,0x02,0x80,0x00,0xC6,0x03,0x00,0x00,0x00,0x00,0x00,
          0x05,0x1B,0x05,0x1B,0x01,0x00,0x02,0x1D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x0C,0xBF,0x00,0x00,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB3,0x00,0x00,0x00,0x80,
          0x00,0x00,0x01,0xD4,0x00,0x00,0x01,0xA5,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0xE3,
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x4B,0x00,0x00,0x00,0x0F,
          0x00,0x00,0x01,0xEA,0x00,0x00,0x01,0xD6,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,
          0x00,0x00,0x01,0xCA,0x00,0x00,0x01,0xF6,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x0F,0xFF,0x0F,0xFF,0x00,0xE0,0x00,0x20,
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x0E,0x00,0x05,0x00,0x05,
          0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x0E,0x00,0x02,0x00,0x96,0x00,0x01,0x03,0x52,
          0x00,0x02,0x01,0x00,0x00,0x02,0x00,0xFF,0x00,0x01,0x02,0xEE,0x00,0x00,0x00,0x0F,
          0x00,0x00,0x00,0x04,0x00,0x08,0x01,0xFF,0x00,0x04,0x01,0x40,0x00,0x04,0x01,0x18,
          0x00,0x09,0x00,0x00,0x00,0x08,0x01,0xFF,0x00,0x08,0x01,0xFF,0x00,0x00,0x00,0x10,
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0x03,0xFF,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x01,0x00,
          0x00,0x01,0x02,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x02,
          0x00,0x03,0x00,0x03,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x00,0x20,0x05,0x06,0xEF,0x01,0xE4,0x01,0xE4,0x02,0x58,0x02,0x58,
          0x51,0xB5,0x3C,0xDF,0x01,0xE4,0x01,0xE4,0x02,0x58,0x02,0x58,0x75,0x97,0x60,0xA7,
          0x01,0xE4,0x01,0xE4,0x02,0x58,0x02,0x58,0x8B,0x63,0x81,0x3B,0x01,0xE4,0x01,0xE4,
          0x02,0x58,0x02,0x58,0xCE,0xD5,0x9C,0x2D,0x01,0xE4,0x01,0xE4,0x02,0x58,0x02,0x58,
          0xEF,0x43,0xDA,0xDF,0x01,0xE4,0x01,0xE4,0x02,0x58,0x02,0x58,0x00,0x32,0x03,0xFF,
          0x20,0x05,0x06,0xEF,0x01,0xEF,0x01,0xEF,0x02,0x58,0x02,0x58,0x51,0xB5,0x3C,0xDF,
          0x01,0xEF,0x01,0xEF,0x02,0x58,0x02,0x58,0x75,0x97,0x60,0xA7,0x01,0xEF,0x01,0xEF,
          0x02,0x58,0x02,0x58,0x8B,0x63,0x81,0x3B,0x01,0xEF,0x01,0xEF,0x02,0x58,0x02,0x58,
          0xD5,0x5F,0xA3,0xAB,0x01,0xEF,0x01,0xEF,0x02,0x58,0x02,0x58,0xEF,0x43,0xDA,0xDF,
          0x01,0xEF,0x01,0xEF,0x02,0x58,0x02,0x58,0x00,0x32,0x03,0xFF,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x32,0x00,0x09,0x00,0x00,0x01,0x2C,0x01,0x2C,
          0x00,0xA7,0x00,0x05,0x00,0x00,0x00,0x02,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
          0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x20,0x00,0x02,0x20,0x00,
          0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x55,0x00,0x00,0x00,0x16,0x00,0x0D,0x00,0x08,0x00,0x19,0x00,0x13,
          0x00,0x27,0x00,0x20,0x00,0x37,0x00,0x2F,0x00,0x64,0x00,0x4B,0x00,0xA4,0x00,0x81,
          0x00,0xFC,0x00,0xCD,0x01,0x78,0x01,0x35,0x02,0x36,0x01,0xCA,0x03,0x58,0x02,0xD9,
          0x00,0x00,0x03,0xFF,0x01,0x07,0x00,0x8F,0x01,0xA7,0x01,0x60,0x02,0x15,0x01,0xE3,
          0x02,0x6E,0x02,0x42,0x02,0xEF,0x02,0xB2,0x03,0x4A,0x03,0x22,0x03,0x8C,0x03,0x70,
          0x03,0xBD,0x03,0xA8,0x03,0xE1,0x03,0xD0,0x03,0xF9,0x03,0xF0,0x00,0x00,0x03,0xFF,
          0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x5E,0x00,0x15,0x00,0x0C,0x00,0x25,0x00,0x1D,
          0x00,0x35,0x00,0x2D,0x00,0x46,0x00,0x3D,0x00,0x6C,0x00,0x58,0x00,0x9D,0x00,0x83,
          0x00,0xDD,0x00,0xBB,0x01,0x39,0x01,0x07,0x01,0xC9,0x01,0x77,0x02,0xAE,0x02,0x45,
          0x00,0x00,0x03,0xFF,0x01,0x07,0x00,0x8F,0x01,0xA7,0x01,0x60,0x02,0x15,0x01,0xE3,
          0x02,0x6E,0x02,0x42,0x02,0xEF,0x02,0xB2,0x03,0x4A,0x03,0x22,0x03,0x8C,0x03,0x70,
          0x03,0xBD,0x03,0xA8,0x03,0xE1,0x03,0xD0,0x03,0xF9,0x03,0xF0,0x00,0x00,0x03,0xFF,
          0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x0A,0x00,0x10,0x00,0x09,0x00,0x20,0x00,0x17,
          0x00,0x33,0x00,0x29,0x00,0x4C,0x00,0x3F,0x00,0x92,0x00,0x6C,0x00,0xF0,0x00,0xBE,
          0x01,0x6A,0x01,0x29,0x02,0x08,0x01,0xB3,0x02,0xE0,0x02,0x6B,0x03,0xB5,0x03,0x6A,
          0x00,0x00,0x03,0xFF,0x01,0x07,0x00,0x8F,0x01,0xA7,0x01,0x60,0x02,0x15,0x01,0xE3,
          0x02,0x6E,0x02,0x42,0x02,0xEF,0x02,0xB2,0x03,0x4A,0x03,0x22,0x03,0x8C,0x03,0x70,
          0x03,0xBD,0x03,0xA8,0x03,0xE1,0x03,0xD0,0x03,0xF9,0x03,0xF0,0x00,0x00,0x03,0xFF,
          0x13,0xEB,0xD7,0x94,0x00,0x00,0x00,0x40,0x13,0xEB,0xD7,0x94,0x00,0x00,0x00,0x07,
          0x03,0xFE,0x55,0x1A,0x00,0x08,0x1F,0x5C,0x00,0x00,0x00,0x01,0x03,0xFE,0x55,0x1A,
          0x00,0x00,0x00,0x06,0x13,0xEB,0xD7,0x94,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,
          0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,
          0x00,0x00,0x00,0x02,0x00,0x08,0x12,0xD0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
          0x13,0xEB,0xD7,0x94,0x13,0xEB,0xD7,0x94,0x00,0x00,0x01,0x1C,0x00,0x00,0x00,0x00,
          0x13,0xEB,0xD7,0xB8,0x03,0xFE,0x56,0xD8,0x00,0x08,0x19,0xD4,0x00,0x00,0x00,0x03,
          0xFF,0xFF,0xFF,0xF9,0xFF,0xFF,0xFF,0xFA,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
          0x00,0x00,0x00,0x05,0x13,0xEB,0xD7,0x94,0x00,0x00,0x01,0x1C,0x00,0x00,0x00,0x00,
          0x00,0x00,0x00,0x01,0x03,0xFE,0x56,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x00,0x02,0x00,0x00,0x08,0x13,0x34,0x00,0x00,0x00,0x00,0x13,0xEB,0xD7,0x94,
          0xFF,0xFF,0xFF,0xF9,0x00,0x00,0x00,0x01,0x03,0xFE,0x56,0xD8,0x00,0x00,0x00,0x05,
          0x02,0x4D,0x01,0x4D,0x02,0x4D,0x01,0x4D,0x02,0x04,0x01,0x8A,0x02,0x4A,0x01,0x5D,
          0x02,0x33,0x01,0x6C,0x02,0x1B,0x01,0x7B,0x01,0xED,0x01,0x98,0x01,0xD5,0x01,0xA7,
          0x01,0xB9,0x01,0xB6,0x01,0x4C,0x02,0xB1,0x01,0x79,0x02,0x62,0x01,0x6A,0x02,0x7D,
          0x01,0x5B,0x02,0x96,0x01,0x3D,0x02,0xCB,0x01,0x2E,0x02,0xE4,0x01,0x1C,0x02,0xFE,
          0x01,0xE8,0x02,0x3E,0x02,0x0E,0x01,0xD8,0x02,0x76,0x01,0x77,0x02,0x46,0x01,0x52,
          0x02,0x94,0x01,0x2C,0x02,0x7A,0x01,0x38,0x02,0x60,0x01,0x45,0x02,0x2B,0x01,0x5F,
          0x02,0x11,0x01,0x6C,0x01,0xF1,0x01,0x78,0x02,0x97,0x01,0x25,0x03,0x1B,0x00,0xF3,
          0x02,0xED,0x01,0x03,0x02,0xC3,0x01,0x14,0x02,0x67,0x01,0x35,0x02,0x36,0x01,0x45,
          0x02,0x07,0x01,0x55,0x00,0x00,0x00,0x20,0x03,0xFE,0x58,0xD7,0x03,0xFD,0xA9,0x24,
          0x00,0x00,0x00,0x00,0x00,0x29,0xCB,0x03,0x03,0xFE,0x59,0xE8,0x03,0xFC,0x24,0x24,
          0x00,0x05,0x00,0x05,0x00,0x12,0x00,0x0E,0x00,0x12,0x00,0x0E,0x00,0x05,0x00,0x04,
          0x00,0x12,0x00,0x09,0x00,0x12,0x00,0x09,0x00,0x05,0x00,0x08,0x00,0x12,0x00,0x12,
          0x00,0x12,0x00,0x12,0x00,0x05,0x00,0x03,0x00,0x12,0x00,0x06,0x00,0x12,0x00,0x06,
          0x00,0x64,0x00,0x64,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
          0x00,0x01,0x00,0x00,0x00,0x64,0x00,0x64,0x03,0x52,0x03,0xFF,0x00,0x00,0x01,0x47,
          0x00,0x04,0x00,0x32,0x00,0x09,0x00,0x00,0x01,0x2C,0x01,0x2C,0x00,0x04,0x00,0x32,
          0x00,0x09,0x00,0x00,0x01,0x2C,0x01,0x2C,0x00,0x04,0x00,0x32,0x00,0x09,0x00,0x00,
          0x01,0x2C,0x01,0x2C,0x00,0x04,0x00,0x32,0x00,0x09,0x00,0x00,0x01,0x2C,0x01,0x2C,
};

static
byte some_data_E5700[1280] =
{
0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x48,0x00,0x00,0x0F,0xFF,0x00,0x00,0x00,0x03
,0x76,0x76,0x89,0x8B,0x00,0x00,0x00,0xFF,0x00,0x01,0x01,0xC2,0x00,0x00,0x1F,0xFF
,0xFF,0xFF,0xFF,0xFF,0x1C,0x18,0x11,0x18,0x14,0x15,0x15,0x17,0x00,0x00,0x00,0x00
,0x00,0x00,0x01,0xFF,0x00,0x00,0x07,0xFF,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x94,0x00,0x00,0x01,0x20,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x8B
,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x8F,0x00,0x00,0x03,0xAF
,0x00,0x00,0x00,0xD7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x60,0x4E
,0x01,0x02,0x10,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE4
,0x00,0x00,0x02,0x5A,0x00,0x00,0x00,0xC6,0x00,0x58,0x00,0xE7,0x00,0x06,0x00,0x54
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x0C,0x00,0x0B
,0x00,0x0A,0x00,0x0F,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0xBE
,0x00,0x02,0x03,0x3E,0x00,0x00,0x01,0xFF,0x00,0x40,0x00,0x4D,0x00,0x00,0x00,0x00
,0x00,0x03,0x03,0x52,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x4E,0x00,0x19,0x00,0x41,0x00,0x1E,0x00,0x62,0x00,0x6E,0x00,0x41,0x00,0x1E
,0x00,0x39,0x00,0x05,0x00,0x41,0x00,0x1E,0x00,0x66,0x00,0x05,0x00,0x41,0x00,0x1E
,0x00,0x36,0x00,0x12,0x00,0x41,0x00,0x1E,0x00,0x6E,0x00,0x7E,0x00,0x6E,0x00,0x7E
,0x00,0x6E,0x00,0x7F,0x00,0x7D,0x00,0x71,0x00,0x78,0x00,0x75,0x00,0x73,0x00,0x7A
,0x00,0x69,0x00,0x84,0x00,0x64,0x00,0x89,0x00,0x5E,0x00,0x8D,0x00,0x57,0x00,0xA8
,0x00,0x62,0x00,0x95,0x00,0x5E,0x00,0x9B,0x00,0x5A,0x00,0xA2,0x00,0x53,0x00,0xAE
,0x00,0x4F,0x00,0xB5,0x00,0x4A,0x00,0xBB,0x00,0x5F,0x00,0xDC,0x00,0x79,0x00,0x97
,0x00,0xA2,0x00,0x76,0x00,0x97,0x00,0x71,0x00,0xAB,0x00,0x64,0x00,0xA5,0x00,0x68
,0x00,0x9E,0x00,0x6D,0x00,0x90,0x00,0x71,0x00,0x89,0x00,0x7A,0x00,0x81,0x00,0x7E
,0x00,0x98,0x00,0x70,0x00,0xB7,0x00,0x5D,0x00,0xAC,0x00,0x63,0x00,0xA2,0x00,0x69
,0x00,0x8D,0x00,0x76,0x00,0x82,0x00,0x7C,0x00,0x77,0x00,0x82,0x00,0x0B,0x00,0x0C
,0x00,0x0F,0x00,0x0A,0x00,0x00,0x00,0x14,0x00,0x06,0x00,0x0C,0x00,0x09,0x00,0x0A
,0x00,0x00,0x00,0x0F,0x00,0x10,0x00,0x0C,0x00,0x15,0x00,0x0A,0x00,0x00,0x00,0x19
,0x00,0x01,0x00,0x0C,0x00,0x01,0x00,0x0A,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x02
,0x00,0x00,0x03,0x3E,0x00,0x00,0x00,0x0F,0x00,0x01,0x01,0xC2,0x76,0x76,0x89,0x8B
,0x1C,0x18,0x11,0x18,0x14,0x15,0x15,0x17,0x00,0x00,0x00,0x94,0x00,0x00,0x01,0x20
,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x8B,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40
,0x00,0x00,0x00,0x8F,0x00,0x00,0x03,0xAF,0x00,0x00,0x00,0xD7,0x00,0x00,0x00,0xE7
,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x54,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x03
,0x00,0x00,0x03,0x48,0x00,0x00,0x00,0x08,0x00,0x03,0x02,0x8A,0x90,0x60,0x93,0x82
,0x1B,0x12,0x11,0x18,0x1D,0x16,0x19,0x16,0x00,0x00,0x00,0x94,0x00,0x00,0x01,0x08
,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40
,0x00,0x00,0x00,0x8F,0x00,0x00,0x03,0xAF,0x00,0x00,0x00,0xCB,0x00,0x00,0x00,0xEC
,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0x54,0x00,0x00,0x00,0xF6,0x00,0x00,0x00,0x4E
,0x00,0x00,0x00,0x45,0x00,0x00,0x00,0x4E,0x00,0x00,0x00,0x47,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0xE3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0xE3
,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x07,0xCF,0x00,0x00,0x03,0xD9
,0x00,0x00,0x0F,0x72,0x00,0x00,0x05,0x9E,0x00,0x00,0x03,0xE3,0x00,0x00,0x00,0xE1
};

// 2592 x 1944
#define E5400_S "E5400"
#define E5400_W 2608
#define E5400_H 1950

// 3264 x 2448
#define E8700_S "E8700"
#define E8700_W 3280
#define E8700_H 2454

// 2560 x 1920
#define E5700_S "E5700"
#define E5700_W 2576
#define E5700_H 1924

bool TIFF_Content::write_nef(FILE* out, bool endian, bool compatible)
{
   // hide members to prevent changes
   IFDir IFD0(this->IFD1);
   IFDir EXIF(this->EXIF); 
    
   unsigned ifd0_start = 8;
   unsigned ifd0_data_size = tn_W*tn_H*3; //57600;
   IFD0.add_DWORD( TIFF::NewSubfile, 1 ); // thumbnail
   IFD0.add_DWORD( TIFF::ImageWidth, tn_W );
   IFD0.add_DWORD( TIFF::ImageHeight, tn_H );
   const int samples_per_pixel = 3;
   word bits_per_sample[samples_per_pixel] = {8,8,8};
   IFD0.add_tag( TIFF::BitsPerSample, TIFF::type_WORD, samples_per_pixel, bits_per_sample );
   IFD0.add_WORD( TIFF::Compression, 1 );
   IFD0.add_WORD( TIFF::PhotometricInterpretation, 2 ); // RGB
   
   if( !IFD0.get_tag(TIFF::ImageDescription) )
      IFD0.add_ASCII( TIFF::ImageDescription, "          " );

   IFD0.combine_ASCII( TIFF::Make, "NIKON" );

   const char* Model;
   int image_W, image_H;

   if( compatible )
   {
      // exactly as E5700/E8700/E5400
      if( ccd_pars.cfa_colors & TCCDParam::PrimaryColorsBit )
      {
         if( ccd_pars.raw_width <= E5400_W && ccd_pars.raw_height <= E5400_H )
         {
            Model = E5400_S;
            image_W = E5400_W;
            image_H = E5400_H;
         }
         else
         {
            Model = E8700_S;
            image_W = E8700_W;
            image_H = E8700_H;
         }
      }
      else
      {
         Model = E5700_S;
         image_W = E5700_W;
         image_H = E5700_H;
      }
   }
   else
   {
      image_W = ccd_pars.raw_width;
      image_H = ccd_pars.raw_height;

      if( ccd_pars.cfa_colors & TCCDParam::PrimaryColorsBit )
      {
         if( ccd_pars.raw_width <= E5400_W && ccd_pars.raw_height <= E5400_H )
            Model = E5400_S;
         else
            Model = E8700_S;
      }
      else
      {
         Model = E5700_S;
      }
   }

   if( ccd_pars.camera == CAMERA_ID(E5000) )
      IFD0.add_ASCII( TIFF::Model, "E5000" );
   else
      IFD0.combine_ASCII( TIFF::Model, Model );

   IFD0.add_DWORD( TIFF::StripOffsets, 0 );
   IFD0.add_WORD( TIFF::SamplesPerPixel, samples_per_pixel );
   IFD0.add_DWORD( TIFF::RowsPerStrip, tn_H);
   IFD0.add_DWORD( TIFF::StripByteCounts, ifd0_data_size );

   IFD0.add_RATIONAL( TIFF::XResolution, Rational(300,1) );
   IFD0.add_RATIONAL( TIFF::YResolution, Rational(300,1) );
   IFD0.add_WORD( TIFF::PlanarConfiguration, 1 ); // chunky
   IFD0.add_WORD( TIFF::ResolutionUnit, 2 ); // inch
   byte tiff_ver[4] = {1,0,0,0};
   IFD0.add_tag( 0x9216, TIFF::type_BYTE, 4, tiff_ver );

   dword sub_ifd = 0;
   IFD0.add_DWORD( TIFF::SubIDFs, sub_ifd ); // SubIDF's offsets
   IFD0.add_DWORD( 0x8769, 0 ); // EXIF offset

   unsigned ifd0_size = IFD0.get_size();
   unsigned exif_start = ifd0_start+ifd0_size;
   IFD0.add_DWORD( 0x8769, exif_start ); // EXIF offset

   // add to EXIF and MakerNote
   byte ver[4] = {0,2,0,0};
   MakerNote.add_tag( 0x0001, TIFF::type_UNDEFINED, 4, ver );
   if( !MakerNote.get_tag(0x0002) ) // ISO Setting
   {
      IFDir::Tag* iso_rating = EXIF.get_tag(0x8827);
      if( iso_rating )
      {
         word iso[2] = { 0, 0};
         iso[1] = (word)iso_rating->get_value(0);
         MakerNote.add_tag( 0x0002, TIFF::type_WORD, 2, iso );
      }
   }
   if( !MakerNote.get_tag(0x0003) ) // ColorMode
   {
      MakerNote.add_ASCII( 0x0003, "COLOR" );
   }
   MakerNote.add_ASCII ( 0x0004, "RAW   ");

   if( ccd_pars.cfa_colors & TCCDParam::PrimaryColorsBit )
      MakerNote.add_tag( 0x0014, TIFF::type_UNDEFINED, 2560, some_data_E8700 );
   else
      MakerNote.add_tag( 0x0014, TIFF::type_UNDEFINED, 1280, some_data_E5700 );

   // reserve place
   int maker_note_size = MakerNote.get_size();
   IFDir::Tag* maker_note = EXIF.add_tag( TIFF::MakerNote, TIFF::type_UNDEFINED, maker_note_size + 18, NULL );

   byte cfa_pattern[8] = {0,2,0,2,5,3,1,4};       // YCGM
   if( ccd_pars.cfa_colors & TCCDParam::PrimaryColorsBit )
   {
      cfa_pattern[4] = 2;
      cfa_pattern[5] = 1;
      cfa_pattern[6] = 1;
      cfa_pattern[7] = 0;
   }
   EXIF.add_tag( TIFF::ColorFilterArrayPattern, TIFF::type_UNDEFINED, 8, cfa_pattern );

   byte exif_ver[4] = {'0','2','2','0'};
   EXIF.add_tag( TIFF::ExifVersion, TIFF::type_UNDEFINED, 4, exif_ver );

   if( maker_note )
   {
      memcpy( maker_note->value, "Nikon\0\002\0\0\0", 10 );
      memcpy( maker_note->value+10, "II*\0\010\0\0\0", 8 );
      MakerNote.write_to_buffer( maker_note->value + 18, maker_note_size, true, 8, 0 );
   }

   unsigned exif_size = EXIF.get_size();

   sub_ifd = exif_start + exif_size;
   IFD0.add_DWORD( TIFF::SubIDFs, sub_ifd );

   bool shift_right = false;
   bool shift_down = false;

   if( ccd_pars.cfa_colors & TCCDParam::ShiftRightBit )
      shift_right = true;

   if( ccd_pars.cfa_colors & TCCDParam::ShiftDownBit )
      shift_down = true;

   IFDir IFD;
   // add to main IFD;
   IFD.add_DWORD( TIFF::NewSubfile, 0 );
   IFD.add_DWORD( TIFF::ImageWidth, image_W );
   IFD.add_DWORD( TIFF::ImageHeight, image_H );
   IFD.add_WORD( TIFF::BitsPerSample, 12 );
   IFD.add_WORD( TIFF::Compression, 1 );
   IFD.add_WORD( TIFF::PhotometricInterpretation, 0x8023 ); // nikon specific

   unsigned row_size = (image_W*12+7)/8;
   unsigned image_size = image_H * row_size;

   IFD.add_DWORD( TIFF::StripOffsets, 0 );
   IFD.add_WORD( TIFF::Orientation, 1 ); //  TopLeft
   IFD.add_WORD( TIFF::SamplesPerPixel, 1 );
   IFD.add_DWORD( TIFF::RowsPerStrip, image_H);
   IFD.add_DWORD( TIFF::StripByteCounts, image_size );

   IFD.add_RATIONAL( TIFF::XResolution, Rational(300,1) );
   IFD.add_RATIONAL( TIFF::YResolution, Rational(300,1) );
   IFD.add_WORD( TIFF::PlanarConfiguration, 1 ); // chunky
   IFD.add_WORD( TIFF::ResolutionUnit, 2 ); // inch

   // nikon specific tags
   word cfa_size[2] = { 2, 2 };
   byte cfa_patt[4] = { 5, 3, 1, 4 };
   if( ccd_pars.cfa_colors & TCCDParam::PrimaryColorsBit )
   {
      cfa_patt[0] = 2;
      cfa_patt[1] = 1;
      cfa_patt[2] = 1;
      cfa_patt[3] = 0;
   }

   IFD.add_tag( TIFF::CFARepeatPatternDim, TIFF::type_WORD, 2, cfa_size );
   IFD.add_tag( TIFF::CFAPattern, TIFF::type_BYTE, 4, cfa_patt );
   IFD.add_WORD( TIFF::TiffSensingMethod, 2 );

   unsigned ifd_size = IFD.get_size();
   unsigned image0_offset = sub_ifd + ifd_size;
   unsigned image_offset = image0_offset + ifd0_data_size;
   IFD0.add_DWORD( TIFF::StripOffsets, image0_offset );
   IFD.add_DWORD( TIFF::StripOffsets, image_offset );

   // writing
   if( !write_word(out, endian, *(word*)(endian ? "II" : "MM")) )
      return false;

   write_word(out, endian, '*');
   write_dword(out, endian, 8);

   if( !write(IFD0, out, endian, 0, 0) )
      return false;

   if( (unsigned)ftell(out) != exif_start )
   {
      printf("error: exif_start=%08X curr=%08X\n", exif_start, ftell(out));
      return false;
   }

   if( !write(EXIF, out, endian, 0, 0) )
      return false;

   if( (unsigned)ftell(out) != sub_ifd )
   {
      printf("error: idf2_start=%08X curr=%08X\n", sub_ifd, ftell(out));
      return false;
   }

   if( !write(IFD, out, endian, 0, 0) )
      return false;

   if( (unsigned)ftell(out) != image0_offset )
   {
      printf("error: img1_start=%08X curr=%08X\n", image0_offset, ftell(out));
      return false;
   }

   // write tiff color thumbnail
   write_thumbnail(out, picture, tn_W, tn_H, ccd_pars );

   if( (unsigned)ftell(out) != image_offset )
   {
      printf("error: image_start=%08X curr=%08X\n", image_offset, ftell(out));
      return false;
   }

   bool ret = true;
   int alloc_size = row_size+4; // small pad
   byte* row = new byte[alloc_size];

   memset(row, 0, sizeof(row[0])*alloc_size );

   color_t* ccd = picture;
   int first_row = ((int)(image_H - ccd_pars.raw_height)>>1)& ~1; // /4*2
   int offset = ((int)(image_W - ccd_pars.raw_width)/4*3);
   int v_offset = (int)ccd_pars.raw_height > image_H ? (ccd_pars.raw_height - image_H)/8 : 0;
   // write even rows in one field
   // odd rows in another field
   int half = image_H/2;
   for(int y=0; y<image_H; ++y)
   {
      int _y;
      
      if( y < half )
         _y = (y+v_offset)*2;
      else
         _y = (y-half+v_offset)*2+1;

      if( shift_down )
      {
         --_y;

         if( _y == -1 ) _y += 2; // repeat first row
         else
         if( _y == image_H ) _y -= 2; // repeat last row
      }

      _y -= first_row;
      if( _y < 0 || _y >= (int)ccd_pars.raw_height )
      {
         memset(row, 0, sizeof(row[0])*alloc_size );

         if( fwrite( row, row_size, 1, out ) != 1 )
         {
            ret = false;
            break;
         }
         continue;
      }

      color_t* pix = ccd + (ccd_pars.raw_width * _y);

      byte* r = row;
      int beg, end, last;

      if( offset > 0 ) 
      {
         r += offset;
         beg = 0;
         end = ccd_pars.raw_width/2;
         last = (ccd_pars.raw_width & 1);
      }
      else
      {
         beg = 0;
         pix += (ccd_pars.raw_width-image_W)/4*2;
         end = image_W/2;
         last = (image_W & 1);
      }
      if( ccd_pars.bits_per_sample == 14)
      {
         if( shift_right )
         {
            r[0] = (byte)(pix[1]>>6);
            r[1] = (byte)(((pix[1]>>2)<<4)|((pix[0]>>10)&15));
            r[2] = (byte)(pix[0]>>2);
            ++pix;
            r += 3;
            --end;
            last ^= 1;
         }

         for(int x=beg; x<end; ++x, pix += 2, r += 3)
         {
            r[0] = (byte)(pix[0]>>6);
            r[1] = (byte)(((pix[0]>>2)<<4)|((pix[1]>>10)&15));
            r[2] = (byte)(pix[1]>>2);
         }

         if( last )
         {
            r[0] = (byte)(pix[0]>>6);
            r[1] = (byte)(((pix[0]>>2)<<4)|((pix[-1]>>10)&15));
            r[2] = (byte)(pix[-1]>>2);
         }
      }
      else
      {
         if( shift_right )
         {
            r[0] = (byte)(pix[1]>>4);
            r[1] = (byte)((pix[1]<<4)|((pix[0]>>8)&15));
            r[2] = (byte)(pix[0]);
            ++pix;
            r += 3;
            --end;
            last ^= 1;
         }

         for(int x=beg; x<end; ++x, pix += 2, r += 3)
         {
            r[0] = (byte)(pix[0]>>4);
            r[1] = (byte)((pix[0]<<4)|((pix[1]>>8)&15));
            r[2] = (byte)(pix[1]);
         }

         if( last )
         {
            r[0] = (byte)(pix[0]>>4);
            r[1] = (byte)((pix[0]<<4)|((pix[-1]>>8)&15));
            r[2] = (byte)(pix[-1]);
         }
      }
      if( fwrite( row, row_size, 1, out ) != 1 )
      {
         ret = false;
         break;
      }
   }

   delete [] row;
   return ret;
}
